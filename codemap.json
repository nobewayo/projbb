{
  "generatedAt": "2025-09-27T12:17:21.293Z",
  "count": 50,
  "files": [
    {
      "path": "packages/client/vite.config.ts",
      "size": 630,
      "checksum": "45180ffcfc7fe71fd17bfac8ad4f9cf2b6ca3d737341bea9d5d0fd92c94cbbc0",
      "tags": [],
      "imports": [
        "node:path",
        "node:url",
        "vite",
        "@vitejs/plugin-react"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/vitest.config.ts",
      "size": 628,
      "checksum": "5f1a4e83a66c208796d2b4ee6b10abe77fb3e190b2cc43d70726fd7bfd36ffb6",
      "tags": [],
      "imports": [
        "node:path",
        "node:url",
        "vitest/config",
        "@vitejs/plugin-react"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/vitest.setup.ts",
      "size": 43,
      "checksum": "91a3c8962a0edcb956206a501d943fe99e1c78c6d4d8b5c9a948a3362c75978c",
      "tags": [],
      "imports": [
        "@testing-library/jest-dom/vitest"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/vitest.config.ts",
      "size": 286,
      "checksum": "a88a9a74cf5ada387c1fd54fb98ba4d07e4ec02d1927e51454295c1393f1df28",
      "tags": [],
      "imports": [
        "vitest/config"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/App.tsx",
      "size": 78381,
      "checksum": "ca0a2589a1b1a500be02837d948edc1bc5904d47435065b048cda6f937dd1003",
      "tags": [
        "ui",
        "realtime",
        "smoke-check"
      ],
      "imports": [
        "react",
        "./canvas/GridCanvas",
        "./styles.css",
        "./ws/useRealtimeConnection",
        "./canvas/types",
        "./canvas/geometry",
        "./assets/items/plant.png",
        "./assets/items/couch.png",
        "./components/ProfilePanel",
        "./components/InventoryCard",
        "./hooks/useActionToast"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [
          {
            "name": "adjustPosition",
            "line": 165,
            "exported": false,
            "signature": "(): void =>"
          },
          {
            "name": "renderTileSection",
            "line": 249,
            "exported": false,
            "signature": "( tile: GridTile, items: CanvasItem[], focusedItemId: string | null, ): JSX.Element => ( <section className=\"context-menu__section\" aria-label=\"Tile items\"> <header className=\"context-menu__header\"> <div> <span className=\"context-menu__title\">Felt ("
          },
          {
            "name": "renderTileMenu",
            "line": 312,
            "exported": false,
            "signature": "(payload: TileContextMenuState): JSX.Element => renderTileSection(payload.tile, payload.items, payload.focusedItemId)"
          },
          {
            "name": "renderOccupantMenu",
            "line": 315,
            "exported": false,
            "signature": "(payload: OccupantContextMenuState): JSX.Element =>"
          },
          {
            "name": "App",
            "line": 486,
            "exported": false,
            "signature": "(): JSX.Element =>"
          },
          {
            "name": "isEditableElement",
            "line": 733,
            "exported": false,
            "signature": "(element: Element | null): boolean =>"
          },
          {
            "name": "commitDraft",
            "line": 746,
            "exported": false,
            "signature": "(next: string) =>"
          },
          {
            "name": "handleGlobalKeyDown",
            "line": 756,
            "exported": false,
            "signature": "(event: KeyboardEvent): void =>"
          },
          {
            "name": "buildSlots",
            "line": 970,
            "exported": false,
            "signature": "(userId: string | null) =>"
          },
          {
            "name": "handleSlotChange",
            "line": 987,
            "exported": false,
            "signature": "(slotIndex: number, value: string) =>"
          },
          {
            "name": "handleSlotClear",
            "line": 1011,
            "exported": false,
            "signature": "(slotIndex: number) =>"
          },
          {
            "name": "handleReadinessToggle",
            "line": 1034,
            "exported": false,
            "signature": "(next: boolean) =>"
          },
          {
            "name": "parseTimestamp",
            "line": 1234,
            "exported": false,
            "signature": "(value?: string | null): number =>"
          },
          {
            "name": "handlePointerDown",
            "line": 1385,
            "exported": false,
            "signature": "(event: PointerEvent): void =>"
          },
          {
            "name": "handleKeyDown",
            "line": 1404,
            "exported": false,
            "signature": "(event: KeyboardEvent): void =>"
          },
          {
            "name": "handleScroll",
            "line": 1427,
            "exported": false,
            "signature": "(): void =>"
          },
          {
            "name": "handleMenuButtonClick",
            "line": 2042,
            "exported": false,
            "signature": "(label: string): void =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/main.tsx",
      "size": 306,
      "checksum": "ee0a7b37abf47d03ccae4a7c6d4bb1c120fecfff164a445017868b6e65c6d8c6",
      "tags": [],
      "imports": [
        "react",
        "react-dom/client",
        "./App.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/index.ts",
      "size": 351,
      "checksum": "b96f0dfc1d4250e8ae603d6bfe0f1627c7d9ac66c87ffb8ec1b30633cf36e4e4",
      "tags": [],
      "imports": [],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/config.ts",
      "size": 3425,
      "checksum": "ca7c32fb97b517186b50513e923245a21d39564d5a16dfa8d45b45148cd0238c",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [
        "resolveCorsOrigins",
        "loadConfig"
      ],
      "symbols": {
        "functions": [
          {
            "name": "numericEnv",
            "line": 3,
            "exported": false,
            "signature": "(value: unknown, defaultValue: number): number =>"
          },
          {
            "name": "buildOrigin",
            "line": 60,
            "exported": false,
            "signature": "(protocol: string, hostname: string, port: string): string =>"
          },
          {
            "name": "resolveCorsOrigins",
            "line": 67,
            "exported": true,
            "signature": "(origin: string): string | string[] =>"
          },
          {
            "name": "addVariant",
            "line": 80,
            "exported": false,
            "signature": "(value: string): void =>"
          },
          {
            "name": "loadConfig",
            "line": 94,
            "exported": true,
            "signature": "(env: NodeJS.ProcessEnv = process.env): ServerConfig =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/index.ts",
      "size": 1240,
      "checksum": "0b7657040863cdb6b8b381c8366e577e225889f78647c40cf0b1641c37f2d54d",
      "tags": [],
      "imports": [
        "dotenv/config",
        "./config.js",
        "./readiness.js",
        "./server.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [
          {
            "name": "bootstrap",
            "line": 6,
            "exported": false,
            "signature": "async (): Promise<void> =>"
          },
          {
            "name": "close",
            "line": 11,
            "exported": false,
            "signature": "async () =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/readiness.ts",
      "size": 377,
      "checksum": "e142da60c6e4e4bd780d2bda4735c81ddc7a050525024bcb38f21c70fae7eb39",
      "tags": [],
      "imports": [],
      "namedExports": [
        "createReadinessController"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createReadinessController",
            "line": 7,
            "exported": true,
            "signature": "(): ReadinessController =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/server.ts",
      "size": 4039,
      "checksum": "48f3940d64275fa7675eac246e7b408cf302d0ee75f5cc6daeef6671130bdaa3",
      "tags": [],
      "imports": [
        "node:crypto",
        "fastify",
        "@fastify/cors",
        "socket.io",
        "./readiness.js",
        "./config.js",
        "./api/auth.js",
        "./db/pool.js",
        "./db/migrations.js",
        "./auth/store.js",
        "./db/rooms.js",
        "./db/chat.js",
        "./db/items.js",
        "./redis/pubsub.js",
        "./metrics/registry.js",
        "./ws/connection.js",
        "./db/preferences.js",
        "./db/admin.js",
        "./db/audit.js",
        "./api/admin.js",
        "./db/social.js",
        "./api/occupants.js"
      ],
      "namedExports": [
        "createServer"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createServer",
            "line": 32,
            "exported": true,
            "signature": "async ("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/canvas/GridCanvas.tsx",
      "size": 36746,
      "checksum": "007608f08576b5e846709073b07db015828e2e1b01b33d491497e2560e5a7e04",
      "tags": [
        "grid",
        "rendering",
        "input"
      ],
      "imports": [
        "react",
        "./constants",
        "./geometry",
        "./types",
        "../assets/rooms/dev_room.png",
        "../assets/avatars/avatar1.png",
        "../assets/avatars/avatar2.png"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [
          {
            "name": "loadImage",
            "line": 168,
            "exported": false,
            "signature": "async (source: string): Promise<HTMLImageElement> => new Promise((resolve, reject) =>"
          },
          {
            "name": "easeOutCubic",
            "line": 176,
            "exported": false,
            "signature": "(t: number): number => 1 - Math.pow(1 - t, 3)"
          },
          {
            "name": "prepareContext",
            "line": 178,
            "exported": false,
            "signature": "(canvas: HTMLCanvasElement): CanvasRenderingContext2D | null =>"
          },
          {
            "name": "drawBackground",
            "line": 201,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, assets: SpriteAssets | null, ): void =>"
          },
          {
            "name": "traceDiamond",
            "line": 212,
            "exported": false,
            "signature": "(context: CanvasRenderingContext2D, tile: GridTile): void =>"
          },
          {
            "name": "drawTile",
            "line": 221,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, tile: GridTile, options:"
          },
          {
            "name": "drawHiddenHoverTile",
            "line": 260,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, tile: GridTile, ): void =>"
          },
          {
            "name": "drawUsername",
            "line": 275,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, sprite: OccupantRenderState, ): void =>"
          },
          {
            "name": "splitLongWord",
            "line": 290,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, word: string, maxWidth: number, ): string[] =>"
          },
          {
            "name": "wrapBubbleLines",
            "line": 314,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, text: string, maxWidth: number, ): string[] =>"
          },
          {
            "name": "pushLine",
            "line": 331,
            "exported": false,
            "signature": "(line: string) =>"
          },
          {
            "name": "drawSpeechBubble",
            "line": 377,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, sprite: OccupantRenderState, options:"
          },
          {
            "name": "drawTypingBubble",
            "line": 453,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, sprite: OccupantRenderState, indicator: CanvasTypingIndicator, ): void =>"
          },
          {
            "name": "drawChatBubbleForSprite",
            "line": 467,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, sprite: OccupantRenderState, bubble: CanvasChatBubble, ): void =>"
          },
          {
            "name": "drawOccupant",
            "line": 480,
            "exported": false,
            "signature": "( context: CanvasRenderingContext2D, sprite: OccupantRenderState, assets: SpriteAssets | null, ): void =>"
          },
          {
            "name": "updateSpritePositions",
            "line": 511,
            "exported": false,
            "signature": "( sprites: Map<string, OccupantRenderState>, now: number, animationsEnabled: boolean, ): void =>"
          },
          {
            "name": "getAvatarVariantIndex",
            "line": 539,
            "exported": false,
            "signature": "(occupant: CanvasOccupant): number =>"
          },
          {
            "name": "formatCoordinate",
            "line": 556,
            "exported": false,
            "signature": "(value: number): string => value.toFixed(0)"
          },
          {
            "name": "GridCanvas",
            "line": 558,
            "exported": false,
            "signature": "("
          },
          {
            "name": "loadAssets",
            "line": 631,
            "exported": false,
            "signature": "async (): Promise<void> =>"
          },
          {
            "name": "loadItemAssets",
            "line": 669,
            "exported": false,
            "signature": "async (): Promise<void> =>"
          },
          {
            "name": "renderFrame",
            "line": 858,
            "exported": false,
            "signature": "(timestamp: number): void =>"
          },
          {
            "name": "handlePointerMove",
            "line": 1018,
            "exported": false,
            "signature": "(event: PointerEvent): void =>"
          },
          {
            "name": "handlePointerLeave",
            "line": 1037,
            "exported": false,
            "signature": "(): void =>"
          },
          {
            "name": "handlePointerDown",
            "line": 1043,
            "exported": false,
            "signature": "(event: PointerEvent): void =>"
          },
          {
            "name": "handleContextMenu",
            "line": 1060,
            "exported": false,
            "signature": "(event: MouseEvent): void =>"
          },
          {
            "name": "getTileItems",
            "line": 1069,
            "exported": false,
            "signature": "(tile: GridTile | null): CanvasItem[] => tile ? itemsRef.current.filter( (item) => item.tileX === tile.gridX && item.tileY === tile.gridY, ) : []"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/canvas/constants.ts",
      "size": 1051,
      "checksum": "977f2e079107d2e5b16cad545a5c48b7a1808b808165a44cbb3036e637ef8011",
      "tags": [
        "grid",
        "constants"
      ],
      "imports": [],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/canvas/geometry.ts",
      "size": 4513,
      "checksum": "a6ae98dee0606911c0b0ca3048ba2d2783429daf1d73c71a5663d1f053b63c54",
      "tags": [
        "grid",
        "geometry"
      ],
      "imports": [
        "./constants",
        "./types"
      ],
      "namedExports": [
        "createTileKey",
        "getColumnsForRow",
        "buildGridDefinition",
        "isPointInsideTile",
        "findTileAtPoint",
        "toScreenPosition"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createTileKey",
            "line": 20,
            "exported": false,
            "signature": "(gridX: number, gridY: number): string => `$"
          },
          {
            "name": "getColumnsForRow",
            "line": 22,
            "exported": true,
            "signature": "(row: number): number => row % 2 === 0 ? EVEN_ROW_COLUMNS : ODD_ROW_COLUMNS"
          },
          {
            "name": "getMaxColumns",
            "line": 25,
            "exported": false,
            "signature": "(): number => Math.max(EVEN_ROW_COLUMNS, ODD_ROW_COLUMNS)"
          },
          {
            "name": "getRowOffset",
            "line": 27,
            "exported": false,
            "signature": "(row: number): number =>"
          },
          {
            "name": "getRowRightSpan",
            "line": 32,
            "exported": false,
            "signature": "(row: number): number =>"
          },
          {
            "name": "computeMaxRowSpan",
            "line": 38,
            "exported": false,
            "signature": "(rowCount: number): number =>"
          },
          {
            "name": "buildGridDefinition",
            "line": 51,
            "exported": true,
            "signature": "( canvasWidth: number = CANVAS_WIDTH, canvasHeight: number = CANVAS_HEIGHT, ): GridDefinition =>"
          },
          {
            "name": "isPointInsideTile",
            "line": 116,
            "exported": true,
            "signature": "(tile: GridTile, px: number, py: number): boolean =>"
          },
          {
            "name": "findTileAtPoint",
            "line": 123,
            "exported": true,
            "signature": "( grid: GridDefinition, px: number, py: number, ): GridTile | null =>"
          },
          {
            "name": "toScreenPosition",
            "line": 170,
            "exported": true,
            "signature": "( grid: GridDefinition, gridX: number, gridY: number, ):"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/canvas/types.ts",
      "size": 661,
      "checksum": "9eac3fd40ab9a53d9a7b052d77be46ee19d702fe83c0679e31fc36cc493a8194",
      "tags": [],
      "imports": [],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/components/InventoryCard.tsx",
      "size": 1338,
      "checksum": "f0f3ff7447a05e97a09175f2021afa546b0bb70652ad598865a877c633501e80",
      "tags": [
        "inventory",
        "panel",
        "ui"
      ],
      "imports": [],
      "namedExports": [],
      "symbols": {
        "functions": [
          {
            "name": "InventoryCard",
            "line": 16,
            "exported": false,
            "signature": "("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/components/ProfilePanel.tsx",
      "size": 3189,
      "checksum": "ad877ca644eb50798f24a9b4124119700f160276158e405dc1b9a940ee76b700",
      "tags": [
        "profile",
        "panel",
        "realtime"
      ],
      "imports": [
        "../ws/useRealtimeConnection"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [
          {
            "name": "ProfilePanel",
            "line": 18,
            "exported": false,
            "signature": "("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/hooks/useActionToast.ts",
      "size": 1269,
      "checksum": "0242e5d3c08979ce5add72a7fe410b2b2e39db3597e9fca8ee70021b4ae448a8",
      "tags": [
        "toast",
        "hooks",
        "ui"
      ],
      "imports": [
        "react"
      ],
      "namedExports": [
        "useActionToast"
      ],
      "symbols": {
        "functions": [
          {
            "name": "useActionToast",
            "line": 18,
            "exported": true,
            "signature": "(timeoutMs = 4000): UseActionToastResult =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/client/src/ws/useRealtimeConnection.ts",
      "size": 74903,
      "checksum": "a854b977fd192c34ea942a86b8cd9ad95e15bf74d68300c36fa96919ba71891d",
      "tags": [
        "websocket",
        "state",
        "hooks"
      ],
      "imports": [
        "react",
        "socket.io-client",
        "@bitby/schemas"
      ],
      "namedExports": [
        "useRealtimeConnection"
      ],
      "symbols": {
        "functions": [
          {
            "name": "sortRoomItems",
            "line": 73,
            "exported": false,
            "signature": "(items: Iterable<RoomItem>): RoomItem[] => Array.from(items).sort((a, b) =>"
          },
          {
            "name": "sortInventoryItems",
            "line": 81,
            "exported": false,
            "signature": "(items: Iterable<InventoryItem>): InventoryItem[] => Array.from(items).sort((a, b) =>"
          },
          {
            "name": "isSessionUser",
            "line": 111,
            "exported": false,
            "signature": "(value: unknown): value is SessionUser =>"
          },
          {
            "name": "isSessionRoom",
            "line": 126,
            "exported": false,
            "signature": "(value: unknown): value is SessionRoom =>"
          },
          {
            "name": "cloneOccupant",
            "line": 253,
            "exported": false,
            "signature": "(occupant: RoomOccupant): RoomOccupant => ("
          },
          {
            "name": "sortOccupants",
            "line": 259,
            "exported": false,
            "signature": "(map: Map<string, RoomOccupant>): RoomOccupant[] => Array.from(map.values()) .map((occupant) => cloneOccupant(occupant)) .sort((a, b) =>"
          },
          {
            "name": "buildEnvelope",
            "line": 270,
            "exported": false,
            "signature": "( seq: number, op: string, data: Record<string, unknown> ="
          },
          {
            "name": "normaliseSocketProtocol",
            "line": 286,
            "exported": false,
            "signature": "(protocol: string): string =>"
          },
          {
            "name": "resolveSocketEndpoint",
            "line": 297,
            "exported": false,
            "signature": "(): SocketEndpoint =>"
          },
          {
            "name": "resolveHttpBaseUrl",
            "line": 323,
            "exported": false,
            "signature": "(): string =>"
          },
          {
            "name": "getExplicitToken",
            "line": 338,
            "exported": false,
            "signature": "(): string | null =>"
          },
          {
            "name": "getDevCredentials",
            "line": 343,
            "exported": false,
            "signature": "():"
          },
          {
            "name": "getLatestPendingTarget",
            "line": 348,
            "exported": false,
            "signature": "( pendingMoves: Map<number,"
          },
          {
            "name": "normaliseTypingPreview",
            "line": 358,
            "exported": false,
            "signature": "(input: string | null | undefined): string | null =>"
          },
          {
            "name": "snapshotTypingIndicators",
            "line": 369,
            "exported": false,
            "signature": "( source: Map<string, TypingIndicatorInternal>, ): TypingIndicatorView[] => Array.from(source.entries()).map(([userId, indicator]) => ("
          },
          {
            "name": "snapshotChatBubbles",
            "line": 378,
            "exported": false,
            "signature": "( source: Map<string, ChatBubbleInternal>, ): ChatBubbleView[] => Array.from(source.entries()).map(([userId, bubble]) => ("
          },
          {
            "name": "useRealtimeConnection",
            "line": 388,
            "exported": true,
            "signature": "(): RealtimeConnectionState =>"
          },
          {
            "name": "clearPingTimer",
            "line": 448,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "clearCountdownTimer",
            "line": 455,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "clearTypingCleanupTimer",
            "line": 462,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "clearBubbleCleanupTimer",
            "line": 469,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "abortLogin",
            "line": 476,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "clearActiveSocket",
            "line": 484,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "startPingTimer",
            "line": 507,
            "exported": false,
            "signature": "(intervalMs: number) =>"
          },
          {
            "name": "updateState",
            "line": 523,
            "exported": false,
            "signature": "(partial: Partial<InternalConnectionState>) =>"
          },
          {
            "name": "requestAuthToken",
            "line": 546,
            "exported": false,
            "signature": "async (): Promise<string> =>"
          },
          {
            "name": "scheduleReconnect",
            "line": 641,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "filterChatLogByMuted",
            "line": 701,
            "exported": false,
            "signature": "( log: ChatMessageBroadcast[], mutedIds: Set<string>, ): ChatMessageBroadcast[] => log .filter((entry) => !entry.userId || !mutedIds.has(entry.userId)) .slice(-200)"
          },
          {
            "name": "appendChatMessage",
            "line": 709,
            "exported": false,
            "signature": "(message: ChatMessageBroadcast) =>"
          },
          {
            "name": "publishTypingIndicators",
            "line": 728,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "pruneTypingIndicators",
            "line": 732,
            "exported": false,
            "signature": "(now: number = Date.now()): void =>"
          },
          {
            "name": "scheduleTypingCleanup",
            "line": 745,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "upsertTypingIndicator",
            "line": 756,
            "exported": false,
            "signature": "( userId: string, preview: string | null, expiresAt?: number, ): void =>"
          },
          {
            "name": "removeTypingIndicator",
            "line": 773,
            "exported": false,
            "signature": "(userId: string): void =>"
          },
          {
            "name": "publishChatBubbles",
            "line": 782,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "pruneChatBubbles",
            "line": 786,
            "exported": false,
            "signature": "(now: number = Date.now()): void =>"
          },
          {
            "name": "scheduleBubbleCleanup",
            "line": 799,
            "exported": false,
            "signature": "() =>"
          },
          {
            "name": "upsertChatBubble",
            "line": 810,
            "exported": false,
            "signature": "(userId: string, messageId: string, body: string): void =>"
          },
          {
            "name": "removeChatBubble",
            "line": 820,
            "exported": false,
            "signature": "(userId: string): void =>"
          },
          {
            "name": "handleEnvelope",
            "line": 829,
            "exported": false,
            "signature": "(envelope: MessageEnvelope) =>"
          },
          {
            "name": "connect",
            "line": 1483,
            "exported": false,
            "signature": "async () =>"
          },
          {
            "name": "detachListeners",
            "line": 1540,
            "exported": false,
            "signature": "() =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/openapi/auth.ts",
      "size": 3069,
      "checksum": "ff4b1f9e89ae2a70dac7beb2133baaf2fc675475867e7938f8d4aac84af8d447",
      "tags": [],
      "imports": [
        "openapi-types"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/rest/occupants.ts",
      "size": 3433,
      "checksum": "d5a66860f1d0653cfca70aad2ee36bfd5c4a221d857d1491b7fb1c89a5aedd52",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/admin.ts",
      "size": 1872,
      "checksum": "2a7d8fbd6e9c3ba61525ca5649676d9885094121cc38e6603d7693e3b11608f9",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/auth.ts",
      "size": 463,
      "checksum": "01f7434830f74eeb8bcfdceeff5b8d16032ad407239e4741ea6ba4d9e5e313eb",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/chat.ts",
      "size": 3213,
      "checksum": "fa80b0dcebbfb9204f426bec17579e3445bb4f94ba7d23dc61b9910ffc99bc41",
      "tags": [],
      "imports": [
        "zod",
        "./envelope.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/envelope.ts",
      "size": 639,
      "checksum": "297a16ea2a24c7aaed6aa072ce16a0c72f4ff9925141b869f52311403bd2f872",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [
        "buildEnvelopeSchema"
      ],
      "symbols": {
        "functions": [
          {
            "name": "buildEnvelopeSchema",
            "line": 17,
            "exported": true,
            "signature": "<Schema extends z.ZodTypeAny>(dataSchema: Schema) => messageEnvelopeSchema.extend("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/items.ts",
      "size": 2210,
      "checksum": "000b6391e19fd49166c6385be124b6b61b8313a37fb53767ca380f14651289c1",
      "tags": [],
      "imports": [
        "zod",
        "./room.js"
      ],
      "namedExports": [
        "roomItemSchema"
      ],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/move.ts",
      "size": 2708,
      "checksum": "b82f541a9640b48f4387e748ea6472c4140dae79a592b2be57e30f2f9a278e51",
      "tags": [],
      "imports": [
        "zod",
        "./envelope.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/room.ts",
      "size": 2377,
      "checksum": "6a0a6a7b3dd77beb0950dcbc556d20511ed5cfb32df0969bb8b02739fcbac665",
      "tags": [],
      "imports": [
        "zod",
        "./admin.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/social.ts",
      "size": 1156,
      "checksum": "df438462f948428d281837ca92b9bfe3631776bb36597f936d563c259ce13ba9",
      "tags": [],
      "imports": [
        "zod"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/schemas/src/ws/trade.ts",
      "size": 444,
      "checksum": "8c6317e17c6fdeb2b73f50bc1a0a3cff0791d0632022505bb8ab7aa9641fca15",
      "tags": [],
      "imports": [
        "zod",
        "../rest/occupants.js"
      ],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/api/admin.ts",
      "size": 11409,
      "checksum": "a9a56cb810cd4853887da32ab1591451034d82e0172d17b117db68c9576894bc",
      "tags": [
        "fastify",
        "admin",
        "http"
      ],
      "imports": [
        "node:crypto",
        "fastify",
        "zod",
        "../auth/jwt.js",
        "../auth/http.js",
        "../config.js",
        "../db/rooms.js",
        "../db/admin.js",
        "../ws/connection.js",
        "../db/items.js",
        "../db/audit.js",
        "../auth/types.js"
      ],
      "namedExports": [
        "adminRoutes"
      ],
      "symbols": {
        "functions": [
          {
            "name": "isTileInBounds",
            "line": 72,
            "exported": false,
            "signature": "(x: number, y: number): boolean =>"
          },
          {
            "name": "adminRoutes",
            "line": 81,
            "exported": true,
            "signature": "( app, options, done, ) =>"
          },
          {
            "name": "requireAdmin",
            "line": 90,
            "exported": false,
            "signature": "async ( request: FastifyRequest, reply: FastifyReply, ): Promise<AuthenticatedUser | null> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/api/auth.ts",
      "size": 1721,
      "checksum": "e23488167a02af9e7e1a5743b2c9ac7287154647fa891ddf210cb5e329801b07",
      "tags": [
        "fastify",
        "auth",
        "http"
      ],
      "imports": [
        "fastify",
        "zod",
        "../config.js",
        "../auth/store.js",
        "../auth/jwt.js"
      ],
      "namedExports": [
        "authRoutes"
      ],
      "symbols": {
        "functions": [
          {
            "name": "authRoutes",
            "line": 20,
            "exported": true,
            "signature": "async ( app: FastifyInstance, options: AuthPluginOptions, ): Promise<void> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/api/occupants.ts",
      "size": 23816,
      "checksum": "9cd4a667141f575b98fde0a1ff6b3c9f5e7f6a3511082aa5f6a18ec8a8e78045",
      "tags": [
        "fastify",
        "rooms",
        "http"
      ],
      "imports": [
        "fastify",
        "zod",
        "../auth/jwt.js",
        "../auth/http.js",
        "../config.js",
        "../db/rooms.js",
        "../db/items.js",
        "../db/social.js",
        "../ws/connection.js"
      ],
      "namedExports": [
        "occupantRoutes"
      ],
      "symbols": {
        "functions": [
          {
            "name": "occupantRoutes",
            "line": 65,
            "exported": true,
            "signature": "( app, options, done, ) =>"
          },
          {
            "name": "requireAuth",
            "line": 72,
            "exported": false,
            "signature": "(request: FastifyRequest):"
          },
          {
            "name": "resolveOccupantContext",
            "line": 87,
            "exported": false,
            "signature": "async ( roomId: string, occupantId: string, requesterId: string, ) =>"
          },
          {
            "name": "resolveTradeContext",
            "line": 110,
            "exported": false,
            "signature": "async ( roomId: string, tradeId: string, requesterId: string, ) =>"
          },
          {
            "name": "mapTradeRecord",
            "line": 137,
            "exported": false,
            "signature": "(trade: TradeSessionRecord) => ("
          },
          {
            "name": "mapTradeProposal",
            "line": 153,
            "exported": false,
            "signature": "(proposal: TradeProposalRecord) => ("
          },
          {
            "name": "buildNegotiationState",
            "line": 166,
            "exported": false,
            "signature": "async (tradeId: string) =>"
          },
          {
            "name": "resolveTradeParticipant",
            "line": 174,
            "exported": false,
            "signature": "async (params:"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/auth/http.ts",
      "size": 289,
      "checksum": "41f81dd09961fbfa05a8da57c57cde772785714a7d63f9de8710c33bd8655bb7",
      "tags": [],
      "imports": [],
      "namedExports": [
        "extractBearerToken"
      ],
      "symbols": {
        "functions": [
          {
            "name": "extractBearerToken",
            "line": 1,
            "exported": true,
            "signature": "(authorization?: string): string | null =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/auth/jwt.ts",
      "size": 1534,
      "checksum": "226d5bfab498885e36b171934a8b3cef06e42a3cb435bbe16990fac26ed965b6",
      "tags": [],
      "imports": [
        "jsonwebtoken",
        "../config.js",
        "./types.js"
      ],
      "namedExports": [
        "signToken",
        "decodeToken"
      ],
      "symbols": {
        "functions": [
          {
            "name": "assertValidClaims",
            "line": 11,
            "exported": false,
            "signature": "function assertValidClaims( claims: TokenClaims, ): asserts claims is TokenClaims &"
          },
          {
            "name": "signToken",
            "line": 23,
            "exported": true,
            "signature": "(user: PublicUser, config: ServerConfig): string =>"
          },
          {
            "name": "decodeToken",
            "line": 37,
            "exported": true,
            "signature": "( token: string, config: ServerConfig, ): AuthenticatedUser =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/auth/store.ts",
      "size": 1615,
      "checksum": "3606ab1ac081c068c497c26908f3ef17e772281635da88e2d2914b7f95230135",
      "tags": [],
      "imports": [
        "argon2",
        "pg",
        "./types.js"
      ],
      "namedExports": [
        "createUserStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "normaliseUsername",
            "line": 11,
            "exported": false,
            "signature": "(username: string): string => username.trim().toLowerCase()"
          },
          {
            "name": "createUserStore",
            "line": 13,
            "exported": true,
            "signature": "(pool: Pool): UserStore =>"
          },
          {
            "name": "findUserByUsername",
            "line": 14,
            "exported": false,
            "signature": "async (username: string): Promise<UserRecord | null> =>"
          },
          {
            "name": "toPublicUser",
            "line": 41,
            "exported": false,
            "signature": "(user: UserRecord): PublicUser => ("
          },
          {
            "name": "verifyUserPassword",
            "line": 47,
            "exported": false,
            "signature": "async ( user: UserRecord, password: string, ): Promise<boolean> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/auth/types.ts",
      "size": 1052,
      "checksum": "ceba5748a90427b29a8cfd1e4cb71afdd5720cd65ad9f5c196c5976b822d684d",
      "tags": [],
      "imports": [],
      "namedExports": [],
      "symbols": {
        "functions": [],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/admin.ts",
      "size": 5613,
      "checksum": "ac9438c6c304ee3efc734b4f80350a53d4d169f52389a21136ad1787243f1350",
      "tags": [],
      "imports": [
        "pg"
      ],
      "namedExports": [
        "createAdminStateStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "mapRow",
            "line": 39,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "serialiseTrace",
            "line": 76,
            "exported": false,
            "signature": "( trace: LatencyTraceState | null, ):"
          },
          {
            "name": "createAdminStateStore",
            "line": 91,
            "exported": true,
            "signature": "(pool: Pool): AdminStateStore =>"
          },
          {
            "name": "getRoomState",
            "line": 92,
            "exported": false,
            "signature": "async (roomId: string): Promise<RoomAdminStateRecord> =>"
          },
          {
            "name": "upsertState",
            "line": 109,
            "exported": false,
            "signature": "async ( roomId: string, next: RoomAdminStateRecord, ): Promise<RoomAdminStateRecord> =>"
          },
          {
            "name": "updateAffordances",
            "line": 148,
            "exported": false,
            "signature": "async ( roomId: string, updates: Partial<DevAffordanceState>, ): Promise<RoomAdminStateRecord> =>"
          },
          {
            "name": "recordLatencyTrace",
            "line": 164,
            "exported": false,
            "signature": "async ( roomId: string, trace:"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/audit.ts",
      "size": 2461,
      "checksum": "774a7b41f1b1fd2bbf3f9ed546919eaf5434f17a54c853749c2e78d2092c6744",
      "tags": [],
      "imports": [
        "pg"
      ],
      "namedExports": [
        "createAuditLogStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "parseContext",
            "line": 25,
            "exported": false,
            "signature": "(raw: unknown): Record<string, unknown> =>"
          },
          {
            "name": "mapRow",
            "line": 33,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "createAuditLogStore",
            "line": 50,
            "exported": true,
            "signature": "(pool: Pool): AuditLogStore =>"
          },
          {
            "name": "recordAdminAction",
            "line": 51,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "listRecentAdminActions",
            "line": 67,
            "exported": false,
            "signature": "async ( options ="
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/chat.ts",
      "size": 3737,
      "checksum": "b949cc46d29eb863edf7ef3adc6050e8875ea1227748f16228444469be777672",
      "tags": [],
      "imports": [
        "pg"
      ],
      "namedExports": [
        "createChatStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "mapRow",
            "line": 28,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "createChatStore",
            "line": 48,
            "exported": true,
            "signature": "(pool: Pool): ChatStore =>"
          },
          {
            "name": "createMessage",
            "line": 49,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "listRecentMessages",
            "line": 83,
            "exported": false,
            "signature": "async ( roomId: string, limit: number, ): Promise<ChatMessageRecord[]> =>"
          },
          {
            "name": "pruneMessagesForRoom",
            "line": 109,
            "exported": false,
            "signature": "async ("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/items.ts",
      "size": 8422,
      "checksum": "6b8c090cdc6659c09186227fab1e7eb134510c652ac3ddf4daa4532fa6287c71",
      "tags": [],
      "imports": [
        "node:crypto",
        "pg"
      ],
      "namedExports": [
        "createItemStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "mapRoomItemRow",
            "line": 53,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "mapInventoryRow",
            "line": 75,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "withTransaction",
            "line": 95,
            "exported": false,
            "signature": "async <T>(pool: Pool, fn: (client: PoolClient) => Promise<T>): Promise<T> =>"
          },
          {
            "name": "createItemStore",
            "line": 115,
            "exported": true,
            "signature": "(pool: Pool): ItemStore =>"
          },
          {
            "name": "listRoomItems",
            "line": 116,
            "exported": false,
            "signature": "async (roomId: string): Promise<RoomItemRecord[]> =>"
          },
          {
            "name": "listInventoryForUser",
            "line": 138,
            "exported": false,
            "signature": "async (userId: string): Promise<InventoryItemRecord[]> =>"
          },
          {
            "name": "attemptPickup",
            "line": 166,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "createRoomItem",
            "line": 263,
            "exported": false,
            "signature": "async ("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/migrations.ts",
      "size": 14073,
      "checksum": "bd770dcbda58f53b3d18504b0338d2604d35d880ad79f712089c62f46cbc1a33",
      "tags": [],
      "imports": [
        "pg",
        "./social.js"
      ],
      "namedExports": [
        "runMigrations"
      ],
      "symbols": {
        "functions": [
          {
            "name": "escapeSqlString",
            "line": 68,
            "exported": false,
            "signature": "(value: string): string => value.replace(/'/g, \"''\")"
          },
          {
            "name": "ensureMigrationTable",
            "line": 308,
            "exported": false,
            "signature": "async (pool: Pool): Promise<void> =>"
          },
          {
            "name": "hasMigrationRun",
            "line": 317,
            "exported": false,
            "signature": "async (client: PoolClient, id: string): Promise<boolean> =>"
          },
          {
            "name": "recordMigration",
            "line": 325,
            "exported": false,
            "signature": "async (client: PoolClient, id: string): Promise<void> =>"
          },
          {
            "name": "runMigrations",
            "line": 332,
            "exported": true,
            "signature": "async (pool: Pool): Promise<void> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/pool.ts",
      "size": 485,
      "checksum": "215bb8a4e1d8a78eb9f1833059f4c81b60b795ad5f08e8d29463e0b7ac8404ba",
      "tags": [],
      "imports": [
        "pg",
        "../config.js"
      ],
      "namedExports": [
        "createPgPool"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createPgPool",
            "line": 4,
            "exported": true,
            "signature": "(config: ServerConfig): Pool => new Pool("
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/preferences.ts",
      "size": 1618,
      "checksum": "3e0e6adebaecaf57b19d669d668b08dfb457634658a889bac4c79846cebb489b",
      "tags": [],
      "imports": [
        "pg"
      ],
      "namedExports": [
        "createPreferenceStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createPreferenceStore",
            "line": 16,
            "exported": true,
            "signature": "(pool: Pool): PreferenceStore =>"
          },
          {
            "name": "getChatPreferences",
            "line": 17,
            "exported": false,
            "signature": "async ( userId: string, ): Promise<ChatPreferenceRecord> =>"
          },
          {
            "name": "updateChatShowSystemMessages",
            "line": 31,
            "exported": false,
            "signature": "async ( userId: string, showSystemMessages: boolean, ): Promise<ChatPreferenceRecord> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/rooms.ts",
      "size": 7185,
      "checksum": "7b0ea90f644fa87e86469726cc7b121788bd298a14cd6b9a244cd1bdef91e22e",
      "tags": [],
      "imports": [
        "pg",
        "../auth/types.js"
      ],
      "namedExports": [
        "createRoomStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "mapRoomRow",
            "line": 42,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "mapOccupantRow",
            "line": 54,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "createRoomStore",
            "line": 69,
            "exported": true,
            "signature": "(pool: Pool): RoomStore =>"
          },
          {
            "name": "getRoomBySlug",
            "line": 70,
            "exported": false,
            "signature": "async (slug: string): Promise<RoomRecord | null> =>"
          },
          {
            "name": "getRoomById",
            "line": 83,
            "exported": false,
            "signature": "async (id: string): Promise<RoomRecord | null> =>"
          },
          {
            "name": "getTileFlags",
            "line": 96,
            "exported": false,
            "signature": "async (roomId: string): Promise<TileFlagRecord[]> =>"
          },
          {
            "name": "getTileFlag",
            "line": 110,
            "exported": false,
            "signature": "async ( roomId: string, x: number, y: number, ): Promise<TileFlagRecord | null> =>"
          },
          {
            "name": "updateTileFlag",
            "line": 131,
            "exported": false,
            "signature": "async ( roomId: string, x: number, y: number, updates: Partial<Omit<TileFlagRecord, 'x' | 'y'>>, ): Promise<TileFlagRecord> =>"
          },
          {
            "name": "listOccupants",
            "line": 157,
            "exported": false,
            "signature": "async (roomId: string): Promise<RoomSnapshotOccupant[]> =>"
          },
          {
            "name": "getOccupant",
            "line": 180,
            "exported": false,
            "signature": "async (userId: string): Promise<RoomOccupantRecord | null> =>"
          },
          {
            "name": "upsertOccupantPosition",
            "line": 204,
            "exported": false,
            "signature": "async ( userId: string, roomId: string, position:"
          },
          {
            "name": "clearOccupant",
            "line": 227,
            "exported": false,
            "signature": "async (userId: string): Promise<void> =>"
          },
          {
            "name": "incrementRoomSequence",
            "line": 231,
            "exported": false,
            "signature": "async (roomId: string): Promise<number> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/db/social.ts",
      "size": 22128,
      "checksum": "cfaeb38996a819ae3c6fc5984f6286ccf2391394a99af945b4c9ba344a32ff19",
      "tags": [],
      "imports": [
        "node:crypto",
        "pg"
      ],
      "namedExports": [
        "createSocialStore"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createSocialStore",
            "line": 105,
            "exported": true,
            "signature": "(pool: Pool): SocialStore =>"
          },
          {
            "name": "mapTradeRow",
            "line": 108,
            "exported": false,
            "signature": "(row:"
          },
          {
            "name": "createTradeSession",
            "line": 138,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "getTradeSessionById",
            "line": 168,
            "exported": false,
            "signature": "async (tradeId) =>"
          },
          {
            "name": "getLatestTradeSessionForUser",
            "line": 198,
            "exported": false,
            "signature": "async ( userId, ) =>"
          },
          {
            "name": "updateTradeSessionStatus",
            "line": 233,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "updateTradeParticipantReadiness",
            "line": 349,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "listTradeProposalsForTrade",
            "line": 419,
            "exported": false,
            "signature": "async (tradeId) =>"
          },
          {
            "name": "removeTradeProposalsForItem",
            "line": 454,
            "exported": false,
            "signature": "async (tradeId: string, inventoryItemId: string) =>"
          },
          {
            "name": "resetReadinessForParticipant",
            "line": 463,
            "exported": false,
            "signature": "async (tradeId: string, participantId: string) =>"
          },
          {
            "name": "upsertTradeProposal",
            "line": 473,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "removeTradeProposal",
            "line": 556,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "recordMute",
            "line": 590,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "recordReport",
            "line": 622,
            "exported": false,
            "signature": "async ("
          },
          {
            "name": "getUserProfile",
            "line": 654,
            "exported": false,
            "signature": "async (userId) =>"
          },
          {
            "name": "listMutesForUser",
            "line": 681,
            "exported": false,
            "signature": "async (userId) =>"
          },
          {
            "name": "listReportsByUser",
            "line": 705,
            "exported": false,
            "signature": "async (userId) =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/metrics/registry.ts",
      "size": 1115,
      "checksum": "2c4e476dce673ba3b836c8875582754bbbf22f38acfedf928bf9485d3cdcfd57",
      "tags": [],
      "imports": [
        "prom-client"
      ],
      "namedExports": [
        "createMetricsBundle"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createMetricsBundle",
            "line": 11,
            "exported": true,
            "signature": "(): MetricsBundle =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/redis/pubsub.ts",
      "size": 4954,
      "checksum": "c69df7840c73e1971382540ec3b1081ac3b60cb63e403a4b6911cd28a5beb602",
      "tags": [],
      "imports": [
        "ioredis",
        "fastify",
        "../config.js",
        "../db/rooms.js",
        "../db/admin.js",
        "../db/items.js",
        "@bitby/schemas"
      ],
      "namedExports": [
        "createRoomPubSub"
      ],
      "symbols": {
        "functions": [
          {
            "name": "ROOM_EVENT_CHANNEL",
            "line": 13,
            "exported": false,
            "signature": "(roomId: string): string => `room.$"
          },
          {
            "name": "createRoomPubSub",
            "line": 97,
            "exported": true,
            "signature": "async ("
          },
          {
            "name": "publish",
            "line": 121,
            "exported": false,
            "signature": "async (event: RoomEvent): Promise<void> =>"
          },
          {
            "name": "subscribe",
            "line": 126,
            "exported": false,
            "signature": "async ( roomId: string, handler: (event: RoomEvent) => void, ): Promise<void> =>"
          },
          {
            "name": "listener",
            "line": 136,
            "exported": false,
            "signature": "(incomingChannel: string, payload: string) =>"
          },
          {
            "name": "close",
            "line": 172,
            "exported": false,
            "signature": "async (): Promise<void> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/ws/connection.ts",
      "size": 58004,
      "checksum": "b9c63b7bd09c1925367b90f6d3e31e8bf4d534322be5e1dd234dbc1f2196638b",
      "tags": [],
      "imports": [
        "node:crypto",
        "fastify",
        "socket.io",
        "@bitby/schemas",
        "zod",
        "../config.js",
        "../auth/jwt.js",
        "../auth/types.js",
        "../db/rooms.js",
        "../db/chat.js",
        "../redis/pubsub.js",
        "../metrics/registry.js",
        "../db/items.js",
        "../db/preferences.js",
        "../db/admin.js",
        "../db/social.js"
      ],
      "namedExports": [
        "createRealtimeServer"
      ],
      "symbols": {
        "functions": [
          {
            "name": "createTileKey",
            "line": 218,
            "exported": false,
            "signature": "(x: number, y: number): string => `$"
          },
          {
            "name": "getColumnsForRow",
            "line": 220,
            "exported": false,
            "signature": "(row: number): number => row % 2 === 0 ? EVEN_ROW_COLUMNS : ODD_ROW_COLUMNS"
          },
          {
            "name": "toUnixTimestamp",
            "line": 223,
            "exported": false,
            "signature": "() => Math.floor(Date.now() / 1000)"
          },
          {
            "name": "createEnvelope",
            "line": 225,
            "exported": false,
            "signature": "(op: string, seq: number, data: EnvelopeData ="
          },
          {
            "name": "toRoomItem",
            "line": 232,
            "exported": false,
            "signature": "(record: RoomItemRecord): RoomItem => ("
          },
          {
            "name": "toInventoryPayload",
            "line": 241,
            "exported": false,
            "signature": "(record: InventoryItemRecord): InventoryItemPayload => ("
          },
          {
            "name": "toMutePayload",
            "line": 251,
            "exported": false,
            "signature": "(record: MuteRecord): SocialMutePayload => ("
          },
          {
            "name": "toReportPayload",
            "line": 259,
            "exported": false,
            "signature": "(record: ReportRecord): SocialReportPayload => ("
          },
          {
            "name": "toTradePayload",
            "line": 268,
            "exported": false,
            "signature": "(record: TradeSessionRecord): TradeLifecyclePayload => ("
          },
          {
            "name": "toTradeProposalPayload",
            "line": 284,
            "exported": false,
            "signature": "(record: TradeProposalRecord) => ("
          },
          {
            "name": "cloneOccupant",
            "line": 297,
            "exported": false,
            "signature": "(occupant: RoomOccupant): RoomOccupant => ("
          },
          {
            "name": "cloneItem",
            "line": 304,
            "exported": false,
            "signature": "(item: RoomItem): RoomItem => ("
          },
          {
            "name": "sortOccupants",
            "line": 313,
            "exported": false,
            "signature": "(map: Map<string, RoomOccupant>): RoomOccupant[] => Array.from(map.values()) .map((occupant) => cloneOccupant(occupant)) .sort((a, b) =>"
          },
          {
            "name": "sortItems",
            "line": 324,
            "exported": false,
            "signature": "(map: Map<string, RoomItem>): RoomItem[] => Array.from(map.values()) .map((item) => cloneItem(item)) .sort((a, b) =>"
          },
          {
            "name": "safeSend",
            "line": 335,
            "exported": false,
            "signature": "( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, ): void =>"
          },
          {
            "name": "acknowledge",
            "line": 347,
            "exported": false,
            "signature": "( logger: FastifyBaseLogger, socket: Socket, requestEnvelope: Envelope, op: string, data: EnvelopeData ="
          },
          {
            "name": "emitSystemMessage",
            "line": 357,
            "exported": false,
            "signature": "( logger: FastifyBaseLogger, socket: Socket, op: string, data: EnvelopeData, ): void =>"
          },
          {
            "name": "createRealtimeServer",
            "line": 366,
            "exported": true,
            "signature": "async ("
          },
          {
            "name": "updateRoomSeq",
            "line": 406,
            "exported": false,
            "signature": "(roomSeq: number): void =>"
          },
          {
            "name": "getOrCreateSocialState",
            "line": 412,
            "exported": false,
            "signature": "(userId: string): UserSocialState =>"
          },
          {
            "name": "serialiseSocialState",
            "line": 421,
            "exported": false,
            "signature": "(userId: string):"
          },
          {
            "name": "refreshSocialStateForUser",
            "line": 432,
            "exported": false,
            "signature": "async (userId: string) =>"
          },
          {
            "name": "resolveTradeParticipantForUser",
            "line": 451,
            "exported": false,
            "signature": "async (params:"
          },
          {
            "name": "buildTradeNegotiationPayload",
            "line": 477,
            "exported": false,
            "signature": "async ( tradeId: string, ): Promise<TradeNegotiationPayload> =>"
          },
          {
            "name": "hydrateTradeLifecycleForUser",
            "line": 487,
            "exported": false,
            "signature": "async ( userId: string, ): Promise<TradeLifecycleBroadcast | null> =>"
          },
          {
            "name": "serialiseAdminState",
            "line": 510,
            "exported": false,
            "signature": "():"
          },
          {
            "name": "buildSnapshot",
            "line": 525,
            "exported": false,
            "signature": "(): RoomSnapshot => ("
          },
          {
            "name": "isTileLocked",
            "line": 540,
            "exported": false,
            "signature": "(x: number, y: number): boolean => developmentRoomState.tileIndex.get(createTileKey(x, y))?.locked ?? false"
          },
          {
            "name": "isTileInBounds",
            "line": 543,
            "exported": false,
            "signature": "(x: number, y: number): boolean =>"
          },
          {
            "name": "isTileOccupied",
            "line": 552,
            "exported": false,
            "signature": "(x: number, y: number, excludeUserId?: string): boolean =>"
          },
          {
            "name": "findAvailableSpawn",
            "line": 566,
            "exported": false,
            "signature": "():"
          },
          {
            "name": "ensureOccupant",
            "line": 580,
            "exported": false,
            "signature": "async ( user: AuthenticatedUser, ): Promise<"
          },
          {
            "name": "registerConnection",
            "line": 618,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, user: AuthenticatedUser, ): Promise<"
          },
          {
            "name": "emitSocialMuteUpdate",
            "line": 645,
            "exported": false,
            "signature": "(payload: SocialMutePayload): void =>"
          },
          {
            "name": "emitSocialReportUpdate",
            "line": 659,
            "exported": false,
            "signature": "(payload: SocialReportPayload): void =>"
          },
          {
            "name": "emitTradeLifecycleUpdate",
            "line": 673,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "unregisterConnection",
            "line": 713,
            "exported": false,
            "signature": "async (socket: Socket): Promise<void> =>"
          },
          {
            "name": "broadcastOccupantMove",
            "line": 755,
            "exported": false,
            "signature": "( occupant: RoomOccupant, roomSeq: number, excludeSocketId?: string, ): void =>"
          },
          {
            "name": "broadcastItemRemoved",
            "line": 776,
            "exported": false,
            "signature": "( itemId: string, roomSeq: number, excludeSocketId?: string, ): void =>"
          },
          {
            "name": "broadcastItemAdded",
            "line": 797,
            "exported": false,
            "signature": "( item: RoomItem, roomSeq: number, excludeSocketId?: string, ): void =>"
          },
          {
            "name": "pruneTypingIndicators",
            "line": 820,
            "exported": false,
            "signature": "(now: number = Date.now()): void =>"
          },
          {
            "name": "serialiseTypingIndicators",
            "line": 828,
            "exported": false,
            "signature": "(): ChatTypingBroadcast[] =>"
          },
          {
            "name": "broadcastTypingEvent",
            "line": 840,
            "exported": false,
            "signature": "( payload: ChatTypingBroadcast, excludeSocketId?: string, ): void =>"
          },
          {
            "name": "setTypingIndicator",
            "line": 857,
            "exported": false,
            "signature": "( userId: string, preview: string | null, ): TypingIndicatorState =>"
          },
          {
            "name": "clearTypingIndicator",
            "line": 872,
            "exported": false,
            "signature": "(userId: string): void =>"
          },
          {
            "name": "broadcastChatEvent",
            "line": 876,
            "exported": false,
            "signature": "(event: RoomChatEvent): void =>"
          },
          {
            "name": "broadcastTileFlagUpdate",
            "line": 907,
            "exported": false,
            "signature": "( tile: TileFlagRecord, roomSeq: number, updatedBy: string, ): void =>"
          },
          {
            "name": "broadcastAffordanceUpdate",
            "line": 926,
            "exported": false,
            "signature": "( state: AdminDevAffordanceState, updatedBy: string, ): void =>"
          },
          {
            "name": "broadcastLatencyTrace",
            "line": 943,
            "exported": false,
            "signature": "(trace: AdminLatencyTrace): void =>"
          },
          {
            "name": "applyTileFlagUpdateInternal",
            "line": 954,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyAffordanceUpdateInternal",
            "line": 982,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyLatencyTraceInternal",
            "line": 1002,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyItemSpawnInternal",
            "line": 1035,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyMuteRecordInternal",
            "line": 1054,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyReportRecordInternal",
            "line": 1071,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "applyTradeLifecycleInternal",
            "line": 1088,
            "exported": false,
            "signature": "async ( event:"
          },
          {
            "name": "attemptMove",
            "line": 1194,
            "exported": false,
            "signature": "async ( userId: string, target:"
          },
          {
            "name": "handleAuth",
            "line": 1274,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, closeWithReason: (reason: string) => void, ): Promise<AuthenticatedUser | null> =>"
          },
          {
            "name": "handleChatSend",
            "line": 1357,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, user: AuthenticatedUser, ): Promise<void> =>"
          },
          {
            "name": "handleTypingUpdate",
            "line": 1423,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, user: AuthenticatedUser, ): Promise<void> =>"
          },
          {
            "name": "handleChatPreferenceUpdate",
            "line": 1473,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, user: AuthenticatedUser, ): Promise<void> =>"
          },
          {
            "name": "handleItemPickup",
            "line": 1505,
            "exported": false,
            "signature": "async ( logger: FastifyBaseLogger, socket: Socket, envelope: Envelope, user: AuthenticatedUser, ): Promise<void> =>"
          },
          {
            "name": "sendError",
            "line": 1516,
            "exported": false,
            "signature": "( code: | 'validation_failed' | 'not_in_room' | 'not_found' | 'tile_blocked' | 'not_on_tile' | 'already_picked_up' | 'persist_failed', message: string, itemId: string, ): void =>"
          },
          {
            "name": "handleConnection",
            "line": 1617,
            "exported": false,
            "signature": "("
          },
          {
            "name": "closeWithReason",
            "line": 1625,
            "exported": false,
            "signature": "(reason: string): void =>"
          },
          {
            "name": "applyTileFlagUpdate",
            "line": 1850,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyAffordanceUpdate",
            "line": 1858,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyLatencyTrace",
            "line": 1865,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyItemSpawn",
            "line": 1869,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyMuteRecord",
            "line": 1877,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyReportRecord",
            "line": 1882,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "applyTradeLifecycleUpdate",
            "line": 1887,
            "exported": false,
            "signature": "async (event:"
          },
          {
            "name": "shutdown",
            "line": 1899,
            "exported": false,
            "signature": "async (): Promise<void> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    },
    {
      "path": "packages/server/src/__tests__/helpers/testStack.ts",
      "size": 3969,
      "checksum": "721180cc70cd8d1a3848c1c99297f50a3d7a8ca1ac6618f32384f4ef31021ca9",
      "tags": [],
      "imports": [
        "ioredis",
        "pg",
        "@testcontainers/redis",
        "@testcontainers/postgresql"
      ],
      "namedExports": [
        "startTestStack"
      ],
      "symbols": {
        "functions": [
          {
            "name": "parseInteger",
            "line": 9,
            "exported": false,
            "signature": "(value: string | undefined, fallback: number): number =>"
          },
          {
            "name": "buildRedisFlusher",
            "line": 37,
            "exported": false,
            "signature": "(redisUrl: string) => async (): Promise<void> =>"
          },
          {
            "name": "attemptExternalStack",
            "line": 46,
            "exported": false,
            "signature": "async (): Promise<TestStack | null> =>"
          },
          {
            "name": "startContainerStack",
            "line": 108,
            "exported": false,
            "signature": "async (): Promise<TestStack> =>"
          },
          {
            "name": "startTestStack",
            "line": 138,
            "exported": true,
            "signature": "async (): Promise<TestStack> =>"
          }
        ],
        "classes": [],
        "methods": []
      }
    }
  ]
}